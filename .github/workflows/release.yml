name: release

on:
  release:
    types:
      - created
  workflow_dispatch:  # Add a manual trigger
    inputs:
      release_version:
        description: 'Release version to sign and upload'
        required: true

jobs:
  release:
    name: release ${{ matrix.target }} (with non-required env)
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
          - target: x86_64-unknown-linux-musl
            archive: tar.gz
          - target: x86_64-apple-darwin
            archive: zip
          - target: wasm32-wasi
            archive: zip tar.gz
    steps:
      - uses: actions/checkout@master
      - name: Compile and release
        uses: rust-build/rust-build.action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          EXTRA_FILES: "README.md LICENSE"
          SRC_DIR: "src"
          ARCHIVE_TYPES: ${{ matrix.archive }}
          MINIFY: "yes"

  sign:
    name: Sign Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GnuPG
        run: sudo apt-get update && sudo apt-get install -y gnupg

      - name: Get latest release
        run: |
          RELEASE_URL=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tarball_url')
          curl -O -L "$RELEASE_URL"
          TAR_GZ_FILENAME=$(basename "$RELEASE_URL")
          echo "::set-output name=tar_gz_filename::$TAR_GZ_FILENAME"

      - name: Import GPG private key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Sign release file
        run: gpg --detach-sign --armor "${{ steps.get_release.outputs.tar_gz_filename }}"

      - name: Upload *.tar.gz.sig file to the release
        uses: actions/upload-artifact@v2
        with:
          name: signed_release
          path: "${{ steps.get_release.outputs.tar_gz_filename }}.sig"